#!/usr/bin/env node

// tslint:disable: no-var-requires
let remote = require("gulp-remote-src-vscode");
let vzip = require("gulp-vinyl-zip");
let vfs = require("vinyl-fs");
let untar = require("gulp-untar");
let gunzip = require("gulp-gunzip");
let chmod = require("gulp-chmod");
let filter = require("gulp-filter");
let path = require("path");
let fs = require("fs");
let shared = require("vscode/lib/shared");
let request = require("request");
let source = require("vinyl-source-stream");

let version = process.env.CODE_VERSION || "*";
let isInsiders = version === "insiders";

let testRunFolder = path.join(".vscode-test", isInsiders ? "insiders" : "stable");
let testRunFolderAbsolute = path.join(process.cwd(), testRunFolder);

let downloadPlatform = (process.platform === "darwin") ? "darwin" : process.platform === "win32" ? "win32-archive" : "linux-x64";

let windowsExecutable;
let darwinExecutable;
let linuxExecutable;

if (isInsiders) {
    windowsExecutable = path.join(testRunFolderAbsolute, "Code - Insiders.exe");
    darwinExecutable = path.join(testRunFolderAbsolute, "Visual Studio Code - Insiders.app", "Contents", "MacOS", "Electron");
    linuxExecutable = path.join(testRunFolderAbsolute, "VSCode-linux-x64", "code-insiders");
} else {
    windowsExecutable = path.join(testRunFolderAbsolute, "Code.exe");
    darwinExecutable = path.join(testRunFolderAbsolute, "Visual Studio Code.app", "Contents", "MacOS", "Electron");
    linuxExecutable = path.join(testRunFolderAbsolute, "VSCode-linux-x64", "code");
    if (["0.10.1", "0.10.2", "0.10.3", "0.10.4", "0.10.5", "0.10.6", "0.10.7", "0.10.8", "0.10.9"].indexOf(version) >= 0) {
        linuxExecutable = path.join(testRunFolderAbsolute, "VSCode-linux-x64", "Code");
    }
}

let executable = (process.platform === "darwin") ? darwinExecutable : process.platform === "win32" ? windowsExecutable : linuxExecutable;

console.log("### VS Code Extension Test Download ###");
console.log("Current working directory: " + process.cwd());

function endDownload() {
    console.log('Download VS Code into "' + testRunFolderAbsolute + '" done');
}

function downloadExecutable() {
    getDownloadUrl(function(downloadUrl) {
        console.log('Downloading VS Code into "' + testRunFolderAbsolute + '" from: ' + downloadUrl);

        const version = downloadUrl.match(/\d+\.\d+\.\d+/)[0].split("\.");
        const isTarGz = downloadUrl.match(/linux/) && version[0] >= 1 && version[1] >= 5;

        let stream;
        if (isTarGz) {
            const gulpFilter = filter(["VSCode-linux-x64/code", "VSCode-linux-x64/code-insiders", "VSCode-linux-x64/resources/app/node_modules*/vscode-ripgrep/**/rg"], { restore: true });
            stream = request(downloadUrl)
                .pipe(source(path.basename(downloadUrl)))
                .pipe(gunzip())
                .pipe(untar())
                .pipe(gulpFilter)
                .pipe(chmod(493)) // 0o755
                .pipe(gulpFilter.restore)
                .pipe(vfs.dest(testRunFolder));
        } else {
            stream = remote("", { base: downloadUrl })
                .pipe(vzip.src())
                .pipe(vfs.dest(testRunFolder));
        }

        stream.on("end", endDownload);
    });
}

function getDownloadUrl(clb) {
    if (process.env.CODE_DOWNLOAD_URL) {
        return clb(process.env.CODE_DOWNLOAD_URL);
    }

    getTag(function(tag) {
        return clb(["https://vscode-update.azurewebsites.net", tag, downloadPlatform, (isInsiders ? "insider" : "stable")].join("/"));
    });
}

function getTag(clb) {
    if (version !== "*" && version !== "insiders") {
        return clb(version);
    }

    shared.getContents("https://vscode-update.azurewebsites.net/api/releases/" + (isInsiders ? "insider/" : "stable/") + downloadPlatform, null, null, function(error, tagsRaw) {
        if (error) {
            exitWithError(error);
        }

        try {
            clb(JSON.parse(tagsRaw)[0]); // first one is latest
        } catch (error) {
            exitWithError(error);
        }
    });
}

fs.exists(executable, function(exists) {
    if (exists) {
        endDownload();
    } else {
        downloadExecutable();
    }
});

function exitWithError(error) {
    console.error("Error downloading vscode: " + error.toString());
    process.exit(1);
}
